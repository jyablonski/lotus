// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO source.users(username, password, email, salt)
VALUES ($1, $2, $3, $4)
RETURNING id, username, password, email, salt, role, created_at, modified_at, timezone
`

type CreateUserParams struct {
	Username string
	Password string
	Email    string
	Salt     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (SourceUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Salt,
	)
	var i SourceUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Salt,
		&i.Role,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Timezone,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, email, salt, role, created_at, modified_at, timezone FROM source.users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (SourceUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i SourceUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Salt,
		&i.Role,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Timezone,
	)
	return i, err
}
