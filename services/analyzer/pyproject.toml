[project]
name = "analyzer"
version = "0.0.1"
description = "Analyzer Microservice"
readme = "README.md"
requires-python = ">=3.13, <3.14"
dependencies = [
    "fastapi[standard]>=0.116.1",
    "psycopg2-binary>=2.9.10",
    "sqlalchemy>=2.0.41",
    "torch>=2.7.1",
    "transformers>=4.53.2",
]

[dependency-groups]
dev = ["pytest>=8.4.1", "pytest-cov>=6.2.1"]
local = ["ipykernel>=6.29.5", "ruff>=0.12.4", "ty>=0.0.1a15"]

[tool.ruff.lint]
# Enable all `pydocstyle` rules
select = ["D"]

# i copied these off reddit
extend-select = [
    "F",   # Pyflakes rules
    "W",   # PyCodeStyle warnings
    "E",   # PyCodeStyle errors
    "I",   # Sort imports properly
    "UP",  # Warn if certain things can changed due to newer Python versions
    "C4",  # Catch incorrect use of comprehensions, dict, list, etc
    "FA",  # Enforce from __future__ import annotations
    "ISC", # Good use of string concatenation
    "ICN", # Use common import conventions
    "RET", # Good return practices
    "SIM", # Common simplification rules
    "TID", # Some good import practices
    "TC",  # Enforce importing certain types in a TYPE_CHECKING block
    "PTH", # Use pathlib instead of os.path
    "NPY", # Some numpy-specific things
]

ignore = [
    "SIM112", # the env vars arent set w/ caps but fuqqit
    "TD002",  # i dont need author
    "TD003",  # i dont need issue links
    "D100",   # No docstring in public module ??? wtf
    "D101",   # No docstrings is fine
    "D103",   # no docstring in public package ??? wtf
    "D104",   # no docstring in public package ??? wtf
    "D415",   # requires period at end of docstring. get some cranberry juice mfer
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint.per-file-ignores]
"*test*.py" = [
    "S101",    # asserts allowed in tests...
    "ARG",     # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",     # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "D103",    # don't need docstrings in tests
    "D200",    # don't need docstrings in tests
    "D205",    # don't need one-liner docstrings in tests
]


[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    'ignore:function ham\(\) is deprecated:DeprecationWarning',
]
testpaths = ["tests"]
markers = [
    "wip: work in progress",
    "infrastructure: mocks for dummy data (sql db, http endpoint etc)",
]
addopts = "--cov=src --cov-report=term-missing --color=yes"