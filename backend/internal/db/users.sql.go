// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO source.users(email, password, salt)
VALUES ($1, $2, $3)
RETURNING id, email, password, salt, role, created_at, modified_at, timezone
`

type CreateUserParams struct {
	Email    string
	Password string
	Salt     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (SourceUser, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Salt)
	var i SourceUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.Role,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Timezone,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, salt, role, created_at, modified_at, timezone FROM source.users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (SourceUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i SourceUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Salt,
		&i.Role,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Timezone,
	)
	return i, err
}
