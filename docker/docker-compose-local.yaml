services:

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${PWD}/docker/db:/docker-entrypoint-initdb.d

  frontend:
    build:
      context: ${PWD}/services/frontend
      dockerfile: Dockerfile
      args:
        - GITHUB_ID=${GITHUB_ID}
        - GITHUB_SECRET=${GITHUB_SECRET}
        - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
        - NEXTAUTH_URL=http://localhost:3000
        - BACKEND_URL=http://backend:8080
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for live updates
      - ${PWD}/services/frontend:/app
      - /app/node_modules
      - /app/.next  # This forces Next.js to regenerate
    environment:
      - NEXTAUTH_URL=http://localhost:3000
      - BACKEND_URL=http://backend:8080
      - AUTH_SECRET=sWgDE0TuAX4YLONhxRtR1flbHF/AEVcV0rF6Y9m9FVY=
      - AUTH_GITHUB_ID=Ov23liCd6cRRiBULnU6M
      - AUTH_GITHUB_SECRET=0dea7cae21e4ffd13620842d9ee0dc44989dfae2
      - AUTH_TRUST_HOST=true
    depends_on:
      - backend
      - postgres

  backend:
    build:
      context: ${PWD}/services/backend
      dockerfile: Dockerfile.dev
    container_name: backend
    ports:
      - "8080:8080"
      - "8081:8081"
      - "50051:50051"
    volumes:
      - ${PWD}/services/backend:/app
      - ${PWD}/services/backend/.air.toml:/app/.air.toml
    depends_on:
      - postgres
    environment:
      - DB_CONN=postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
      - ANALYZER_BASE_URL=http://analyzer:8083
    working_dir: /app  # Ensure air runs in the correct dir
    command: ["air", "-c", ".air.toml"]

  analyzer:
    build:
      context: ${PWD}/services/analyzer
      dockerfile: Dockerfile
    container_name: analyzer
    restart: unless-stopped
    ports:
      - "8083:8083"
    volumes:
      - ${PWD}/services/analyzer/src:/home/appuser/src
      - ${PWD}/services/analyzer/config.yaml:/home/appuser/config.yaml
    environment:
      - ENV_TYPE=docker_dev
      - MLFLOW_CONN_URI=http://mlflow:5000
      - ENABLE_V1_ROUTER=true
    depends_on:
      - postgres
      - mlflow

  mlflow:
    build:
      context: ${PWD}/services/experiments
      dockerfile: Dockerfile
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres@postgres:5432/postgres
      - MLFLOW_ARTIFACTS_DESTINATION=/mlflow/artifacts
    volumes:
      - ${PWD}/docker/mlflow/artifacts:/mlflow/artifacts
    depends_on:
      - postgres
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:postgres@postgres:5432/postgres
      --artifacts-destination /mlflow/artifacts
      --host 0.0.0.0
      --port 5000

volumes:
  postgres_data: